Task-1:

Suppose you are working on a geometry library that deals with different types of geometric shapes, including circles, rectangles, and triangles. 
Each shape has common properties like area and perimeter, but also specific attributes such as radius for circles, length and width for rectangles, and side lengths for triangles.

•	Develop a class hierarchy for geometric shapes using inheritance in C++.
•	Explain how you would utilize inheritance and polymorphism to implement algorithms for calculating area and perimeter that are specific to each type of shape


Task-2:

An operator overloading allows custom behavior to be defined for built-in operators like addition (+), subtraction (-), when we used with user-defined types.
When overloading binary operators as friend functions, external functions can access private members of a class.
Provide examples how binary operator overloading is implemented using friend functions. 




task1-
#include <iostream>
#include <cmath>

using namespace std; 

class Shape {
public:
    virtual float Area() const = 0;
    virtual float Perimeter() const = 0;
};

class Circle : public Shape {
private:
    float radius;

public:
    Circle(float r) : radius(r) {}

    float Area() const override {
        return M_PI * radius * radius;
    }

    float Perimeter() const override {
        return 2 * M_PI * radius;
    }
};

class Rectangle : public Shape {
private:
    float length, width;

public:
    Rectangle(float l, float w) : length(l), width(w) {}

    float Area() const override {
        return length * width;
    }

    float Perimeter() const override {
        return 2 * (length + width);
    }
};

int main() {
    Circle circle(5);
    Rectangle rectangle(4, 6);

    cout << "Circle Area: " << circle.Area() << endl;
    cout << "Circle Perimeter: " << circle.Perimeter() << endl;

    cout << "Rectangle Area: " << rectangle.Area() << endl;
    cout << "Rectangle Perimeter: " << rectangle.Perimeter() << endl;

    return 0;
}


task2-
#include <iostream>
#include <cmath>

using namespace std; 

class Vector {
private:
    int v[5]; 

public:
    Vector() {
        for (int i = 0; i < 5; ++i)
            v[i] = 0;
    }

    Vector(int* x) {
        for (int i = 0; i < 5; ++i)
            v[i] = x[i];
    }

    
    friend Vector operator+(const Vector& M, const Vector& N) {
        Vector result;
        for (int i = 0; i < 5; ++i)
            result.v[i] = M.v[i] + N.v[i];
        return result;
    }

    void Display() {
        for (int i = 0; i < 5; ++i)
            cout << v[i] << " ";
        cout << endl;
    }
};

int main() {
    int arr1[] = {1, 2, 3, 4, 5};
    int arr2[] = {10, 20, 30, 40, 50};

    Vector v1(arr1);
    Vector v2(arr2);

    Vector sum = v1 + v2; 

    cout << "Vector v1: ";
    v1.Display();

    cout << "Vector v2: ";
    v2.Display();

    cout << "Sum of vectors: ";
    sum.Display();

    return 0;
}

